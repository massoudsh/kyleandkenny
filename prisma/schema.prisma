// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // Using PostgreSQL for production readiness
  url      = env("DATABASE_URL")
}

// User Management
model User {
  id            String   @id @default(cuid())
  email         String   @unique
  username      String   @unique
  password      String // Hashed password
  name          String?
  bio           String?
  avatar        String?
  role          Role     @default(USER)
  isActive      Boolean  @default(true)
  emailVerified Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  posts       Post[]
  comments    Comment[]
  likes       Like[]
  sessions    Session[]
  resetTokens PasswordResetToken[]

  @@map("users")
}

// User Roles
enum Role {
  ADMIN
  MODERATOR
  USER
}

// User Sessions for Authentication
model Session {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  userAgent String?
  ipAddress String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

// Password Reset Tokens
model PasswordResetToken {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  used      Boolean  @default(false)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("password_reset_tokens")
}

// Blog Posts
model Post {
  id            String     @id @default(cuid())
  title         String
  slug          String     @unique
  content       String
  excerpt       String?
  featuredImage String?
  status        PostStatus @default(DRAFT)
  publishedAt   DateTime?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  viewCount     Int        @default(0)
  authorId      String

  // Relations
  author      User           @relation(fields: [authorId], references: [id], onDelete: Cascade)
  comments    Comment[]
  likes       Like[]
  tags        PostTag[]
  categories  PostCategory[]
  searchIndex SearchIndex?

  @@map("posts")
}

// Post Status
enum PostStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

// Comments System
model Comment {
  id         String   @id @default(cuid())
  content    String
  isApproved Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  authorId   String
  postId     String
  parentId   String? // For nested comments

  // Relations
  author  User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  post    Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  parent  Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies Comment[] @relation("CommentReplies")

  @@map("comments")
}

// Like System
model Like {
  id        String   @id @default(cuid())
  userId    String
  postId    String
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@map("likes")
}

// Tags System
model Tag {
  id          String   @id @default(cuid())
  name        String   @unique
  slug        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  posts PostTag[]

  @@map("tags")
}

// Post-Tag Many-to-Many
model PostTag {
  postId String
  tagId  String

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  tag  Tag  @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([postId, tagId])
  @@map("post_tags")
}

// Categories System
model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  slug        String   @unique
  description String?
  parentId    String? // For nested categories
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  posts    PostCategory[]
  parent   Category?      @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children Category[]     @relation("CategoryHierarchy")

  @@map("categories")
}

// Post-Category Many-to-Many
model PostCategory {
  postId     String
  categoryId String

  post     Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@id([postId, categoryId])
  @@map("post_categories")
}

// File Uploads
model File {
  id           String   @id @default(cuid())
  filename     String
  originalName String
  mimeType     String
  size         Int
  path         String
  url          String
  uploadedBy   String
  createdAt    DateTime @default(now())

  @@map("files")
}

// Site Settings
model Setting {
  id    String @id @default(cuid())
  key   String @unique
  value String
  type  String @default("string") // string, number, boolean, json

  @@map("settings")
}

// Analytics/Logging
model PageView {
  id        String   @id @default(cuid())
  page      String
  referrer  String?
  userAgent String?
  ipAddress String?
  userId    String?
  createdAt DateTime @default(now())

  @@map("page_views")
}

// Search Index (for full-text search)
model SearchIndex {
  id        String   @id @default(cuid())
  postId    String   @unique
  title     String
  content   String
  tags      String[] // Array of tag names
  updatedAt DateTime @updatedAt

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@map("search_index")
}
